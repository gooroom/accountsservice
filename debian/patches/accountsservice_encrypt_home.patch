diff --git a/data/org.freedesktop.Accounts.xml b/data/org.freedesktop.Accounts.xml
index 4612c5d..c9948ec 100644
--- a/data/org.freedesktop.Accounts.xml
+++ b/data/org.freedesktop.Accounts.xml
@@ -111,6 +111,57 @@
       </doc:doc>
     </method>
 
+    <method name="CreateUserEncrypt">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+      <arg name="name" direction="in" type="s">
+        <doc:doc><doc:summary>The username for the new user</doc:summary></doc:doc>
+      </arg>
+      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+      <arg name="fullname" direction="in" type="s">
+        <doc:doc><doc:summary>The real name for the new user</doc:summary></doc:doc>
+      </arg>
+      <arg name="user" direction="out" type="o">
+        <doc:doc><doc:summary>Object path of the new user</doc:summary></doc:doc>
+      </arg>
+      <arg name="accountType" direction="in" type="i">
+        <doc:doc>
+          <doc:summary>The account type, encoded as an integer</doc:summary>
+        </doc:doc>
+      </arg>
+      <arg name="encryptHome" direction="in" type="b">
+        <doc:doc>
+          <doc:summary>Encrypt the home directory, boolean</doc:summary>
+        </doc:doc>
+      </arg>
+      <doc:doc>
+        <doc:description>
+          <doc:para>
+            Creates a new user account with optional encryption.
+          </doc:para>
+          <doc:para>
+          The accountType argument can take the following values:
+          </doc:para>
+            <doc:list>
+              <doc:item>
+                <doc:term>0</doc:term>
+                <doc:definition>Standard user</doc:definition>
+              </doc:item>
+              <doc:item>
+                <doc:term>1</doc:term>
+                <doc:definition>Administrator</doc:definition>
+              </doc:item>
+            </doc:list>
+        </doc:description>
+        <doc:permission>
+          The caller needs the org.freedesktop.accounts.user-administration PolicyKit authorization.
+        </doc:permission>
+        <doc:errors>
+          <doc:error name="org.freedesktop.Accounts.Error.PermissionDenied">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+          <doc:error name="org.freedesktop.Accounts.Error.Failed">if the operation failed</doc:error>
+        </doc:errors>
+      </doc:doc>
+    </method>
+
     <method name="CacheUser">
       <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
       <arg name="name" direction="in" type="s">
diff --git a/src/daemon.c b/src/daemon.c
index ceb0f5f..9bf3a33 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -1074,6 +1074,7 @@ typedef struct {
         gchar *user_name;
         gchar *real_name;
         gint account_type;
+        gboolean encrypt_home;
 } CreateUserData;
 
 static void
@@ -1136,6 +1137,11 @@ daemon_create_user_authorized_cb (Daemon                *daemon,
                 return;
         }
 
+        if (cd->encrypt_home) {
+                argv[6] = "--encrypt-home";
+                argv[7] = NULL;
+        }
+
         if (!spawn_with_login_uid (context, argv, &error)) {
                 throw_error (context, ERROR_FAILED, "running '%s' failed: %s", argv[0], error->message);
                 return;
@@ -1170,11 +1176,12 @@ daemon_create_user_authorized_cb (Daemon                *daemon,
 }
 
 static gboolean
-daemon_create_user (AccountsAccounts      *accounts,
-                    GDBusMethodInvocation *context,
-                    const gchar           *user_name,
-                    const gchar           *real_name,
-                    gint                   account_type)
+daemon_create_user_encrypt (AccountsAccounts      *accounts,
+                            GDBusMethodInvocation *context,
+                            const gchar           *user_name,
+                            const gchar           *real_name,
+                            gint                   account_type,
+                            gboolean               encrypt_home)
 {
         Daemon *daemon = (Daemon*)accounts;
         CreateUserData *data;
@@ -1183,6 +1190,7 @@ daemon_create_user (AccountsAccounts      *accounts,
         data->user_name = g_strdup (user_name);
         data->real_name = g_strdup (real_name);
         data->account_type = account_type;
+        data->encrypt_home = encrypt_home;
 
         daemon_local_check_auth (daemon,
                                  NULL,
@@ -1196,6 +1204,21 @@ daemon_create_user (AccountsAccounts      *accounts,
         return TRUE;
 }
 
+static gboolean
+daemon_create_user (AccountsAccounts      *accounts,
+                    GDBusMethodInvocation *context,
+                    const gchar           *user_name,
+                    const gchar           *real_name,
+                    gint                   account_type)
+{
+        return daemon_create_user_encrypt (accounts,
+                                           context,
+                                           user_name,
+                                           real_name,
+                                           account_type,
+                                           FALSE);
+}
+
 static void
 daemon_cache_user_authorized_cb (Daemon                *daemon,
                                  User                  *dummy,
@@ -1817,6 +1840,7 @@ static void
 daemon_accounts_accounts_iface_init (AccountsAccountsIface *iface)
 {
         iface->handle_create_user = daemon_create_user;
+        iface->handle_create_user_encrypt = daemon_create_user_encrypt;
         iface->handle_delete_user = daemon_delete_user;
         iface->handle_find_user_by_id = daemon_find_user_by_id;
         iface->handle_find_user_by_name = daemon_find_user_by_name;
diff --git a/src/libaccountsservice/act-user-manager.c b/src/libaccountsservice/act-user-manager.c
index 6be9165..6c39c44 100644
--- a/src/libaccountsservice/act-user-manager.c
+++ b/src/libaccountsservice/act-user-manager.c
@@ -3161,11 +3161,12 @@ act_user_manager_no_service (ActUserManager *manager)
 }
 
 /**
- * act_user_manager_create_user:
+ * act_user_manager_create_user_encrypt:
  * @manager: a #ActUserManager
  * @username: a unix user name
  * @fullname: a unix GECOS value
  * @accounttype: a #ActUserAccountType
+ * @encrypthome: encrypt home directory
  * @error: a #GError
  *
  * Creates a user account on the system.
@@ -3173,11 +3174,12 @@ act_user_manager_no_service (ActUserManager *manager)
  * Returns: (transfer full): user object
  */
 ActUser *
-act_user_manager_create_user (ActUserManager      *manager,
-                              const char          *username,
-                              const char          *fullname,
-                              ActUserAccountType   accounttype,
-                              GError             **error)
+act_user_manager_create_user_encrypt (ActUserManager      *manager,
+                                      const char          *username,
+                                      const char          *fullname,
+                                      ActUserAccountType   accounttype,
+                                      gboolean             encrypthome,
+                                      GError             **error)
 {
         ActUserManagerPrivate *priv = act_user_manager_get_instance_private (manager);
         GError *local_error = NULL;
@@ -3185,18 +3187,19 @@ act_user_manager_create_user (ActUserManager      *manager,
         g_autofree gchar *path = NULL;
         ActUser *user;
 
-        g_debug ("ActUserManager: Creating user '%s', '%s', %d",
-                 username, fullname, accounttype);
+        g_debug ("ActUserManager: Creating user '%s', '%s', %d, %d",
+                 username, fullname, accounttype, (int)encrypthome);
 
         g_assert (priv->accounts_proxy != NULL);
 
-        res = accounts_accounts_call_create_user_sync (priv->accounts_proxy,
-                                                       username,
-                                                       fullname,
-                                                       accounttype,
-                                                       &path,
-                                                       NULL,
-                                                       &local_error);
+        res = accounts_accounts_call_create_user_encrypt_sync (priv->accounts_proxy,
+                                                               username,
+                                                               fullname,
+                                                               accounttype,
+                                                               encrypthome,
+                                                               &path,
+                                                               NULL,
+                                                               &local_error);
         if (!res) {
                 g_propagate_error (error, local_error);
                 return NULL;
@@ -3207,6 +3210,33 @@ act_user_manager_create_user (ActUserManager      *manager,
         return user;
 }
 
+/**
+ * act_user_manager_create_user:
+ * @manager: a #ActUserManager
+ * @username: a unix user name
+ * @fullname: a unix GECOS value
+ * @accounttype: a #ActUserAccountType
+ * @error: a #GError
+ *
+ * Creates a user account on the system.
+ *
+ * Returns: (transfer full): user object
+ */
+ActUser *
+act_user_manager_create_user (ActUserManager      *manager,
+                              const char          *username,
+                              const char          *fullname,
+                              ActUserAccountType   accounttype,
+                              GError             **error)
+{
+        return act_user_manager_create_user_encrypt (manager,
+                                                     username,
+                                                     fullname,
+                                                     accounttype,
+                                                     FALSE,
+                                                     error);
+}
+
 static void
 act_user_manager_async_complete_handler (GObject      *source,
                                          GAsyncResult *result,
@@ -3219,11 +3249,12 @@ act_user_manager_async_complete_handler (GObject      *source,
 }
 
 /**
- * act_user_manager_create_user_async:
+ * act_user_manager_create_user_encrypt_async:
  * @manager: a #ActUserManager
  * @username: a unix user name
  * @fullname: a unix GECOS value
  * @accounttype: a #ActUserAccountType
+ * @encrypthome: encrypt home folder
  * @cancellable: (allow-none): optional #GCancellable object,
  *     %NULL to ignore
  * @callback: (scope async): a #GAsyncReadyCallback to call
@@ -3238,13 +3269,14 @@ act_user_manager_async_complete_handler (GObject      *source,
  * Since: 0.6.27
  */
 void
-act_user_manager_create_user_async (ActUserManager      *manager,
-                                    const char          *username,
-                                    const char          *fullname,
-                                    ActUserAccountType   accounttype,
-                                    GCancellable        *cancellable,
-                                    GAsyncReadyCallback  callback,
-                                    gpointer             user_data)
+act_user_manager_create_user_encrypt_async (ActUserManager      *manager,
+                                            const char          *username,
+                                            const char          *fullname,
+                                            ActUserAccountType   accounttype,
+                                            gboolean             encrypthome,
+                                            GCancellable        *cancellable,
+                                            GAsyncReadyCallback  callback,
+                                            gpointer             user_data)
 {
         ActUserManagerPrivate *priv = act_user_manager_get_instance_private (manager);
         GTask *task;
@@ -3252,8 +3284,8 @@ act_user_manager_create_user_async (ActUserManager      *manager,
         g_return_if_fail (ACT_IS_USER_MANAGER (manager));
         g_return_if_fail (priv->accounts_proxy != NULL);
 
-        g_debug ("ActUserManager: Creating user (async) '%s', '%s', %d",
-                 username, fullname, accounttype);
+        g_debug ("ActUserManager: Creating user (async) '%s', '%s', %d, %d",
+                 username, fullname, accounttype, (int)encrypthome);
 
         g_assert (priv->accounts_proxy != NULL);
 
@@ -3261,12 +3293,51 @@ act_user_manager_create_user_async (ActUserManager      *manager,
                            cancellable,
                            callback, user_data);
 
-        accounts_accounts_call_create_user (priv->accounts_proxy,
-                                            username,
-                                            fullname,
-                                            accounttype,
-                                            cancellable,
-                                            act_user_manager_async_complete_handler, task);
+        accounts_accounts_call_create_user_encrypt (priv->accounts_proxy,
+                                                    username,
+                                                    fullname,
+                                                    accounttype,
+                                                    encrypthome,
+                                                    cancellable,
+                                                    act_user_manager_async_complete_handler, task);
+}
+
+/**
+ * act_user_manager_create_user_async:
+ * @manager: a #ActUserManager
+ * @username: a unix user name
+ * @fullname: a unix GECOS value
+ * @accounttype: a #ActUserAccountType
+ * @cancellable: (allow-none): optional #GCancellable object,
+ *     %NULL to ignore
+ * @callback: (scope async): a #GAsyncReadyCallback to call
+ *     when the request is satisfied
+ * @user_data: (closure): the data to pass to @callback
+ *
+ * Asynchronously creates a user account on the system.
+ *
+ * For more details, see act_user_manager_create_user(), which
+ * is the synchronous version of this call.
+ *
+ * Since: 0.6.27
+ */
+void
+act_user_manager_create_user_async (ActUserManager      *manager,
+                                    const char          *username,
+                                    const char          *fullname,
+                                    ActUserAccountType   accounttype,
+                                    GCancellable        *cancellable,
+                                    GAsyncReadyCallback  callback,
+                                    gpointer             user_data)
+{
+        act_user_manager_create_user_encrypt_async (manager,
+                                                    username,
+                                                    fullname,
+                                                    accounttype,
+                                                    FALSE,
+                                                    cancellable,
+                                                    callback,
+                                                    user_data);
 }
 
 /**
diff --git a/src/libaccountsservice/act-user-manager.h b/src/libaccountsservice/act-user-manager.h
index afa8a5f..4af0a7e 100644
--- a/src/libaccountsservice/act-user-manager.h
+++ b/src/libaccountsservice/act-user-manager.h
@@ -90,11 +90,25 @@ gboolean            act_user_manager_can_switch            (ActUserManager *mana
 
 gboolean            act_user_manager_goto_login_session    (ActUserManager *manager);
 
+ActUser *           act_user_manager_create_user_encrypt   (ActUserManager     *manager,
+                                                            const char         *username,
+                                                            const char         *fullname,
+                                                            ActUserAccountType  accounttype,
+                                                            gboolean            encrypthome,
+                                                            GError             **error);
 ActUser *           act_user_manager_create_user           (ActUserManager     *manager,
                                                             const char         *username,
                                                             const char         *fullname,
                                                             ActUserAccountType  accounttype,
                                                             GError             **error);
+void                act_user_manager_create_user_encrypt_async (ActUserManager     *manager,
+                                                                const gchar        *username,
+                                                                const gchar        *fullname,
+                                                                ActUserAccountType  accounttype,
+                                                                gboolean            encrypthome,
+                                                                GCancellable       *cancellable,
+                                                                GAsyncReadyCallback callback,
+                                                                gpointer            user_data);
 void                act_user_manager_create_user_async     (ActUserManager     *manager,
                                                             const gchar        *username,
                                                             const gchar        *fullname,
